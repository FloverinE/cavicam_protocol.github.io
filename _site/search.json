[
  {
    "objectID": "index.html#guide-to-optical-vulnerability-analysis",
    "href": "index.html#guide-to-optical-vulnerability-analysis",
    "title": "cavicam_protocol.github.io",
    "section": "Guide to optical vulnerability analysis",
    "text": "Guide to optical vulnerability analysis\nasdasd"
  },
  {
    "objectID": "index.html#exemplary-analysis-of-a-single-vulnerability-curve",
    "href": "index.html#exemplary-analysis-of-a-single-vulnerability-curve",
    "title": "cavicam_protocol.github.io",
    "section": "Exemplary analysis of a single vulnerability curve",
    "text": "Exemplary analysis of a single vulnerability curve\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\nLoad libraries\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nLade nötiges Paket: mgcv\n\nLade nötiges Paket: nlme\n\n\nAttache Paket: 'nlme'\n\n\nDas folgende Objekt ist maskiert 'package:dplyr':\n\n    collapse\n\n\nThis is mgcv 1.8-42. For overview type 'help(\"mgcv-package\")'.\n\nThis is scam 1.2-17.\n\nLade nötiges Paket: car\n\nLade nötiges Paket: carData\n\n\nAttache Paket: 'car'\n\n\nDas folgende Objekt ist maskiert 'package:dplyr':\n\n    recode\n\n\nDas folgende Objekt ist maskiert 'package:purrr':\n\n    some\n\n\n\n\nLoad data\n\n## load the embolism data\nfrex_05_all_vessels &lt;- read.csv(\"frex_05_all_vessels.csv\")\n\n## load the water potentials\nfrex_05_psi &lt;- read_excel(\"frex_05_psi.xlsx\", sheet = \"FREX_05\")\n\n\n\nProcess dataframes\n\nfrex_05_all_vessels &lt;- frex_05_all_vessels |&gt; \n  rename(id = X) |&gt;                              ## rename the id column\n  mutate(area_cav = cumsum(Area),                ## calculate the cumulative embolised area \n         perc_area_cav =  area_cav / sum(Area) * 100,  ## calculate the percentage of embolised area\n         minutes =  id * 5 - 5) |&gt;               ## convert each row into minutes (1 image every 5 minutes)\n  select(c(area_cav, perc_area_cav, minutes))    ## select only the columns we need\n\nfrex_05_psi &lt;- frex_05_psi |&gt;\n   mutate(\n     drying_interval = start_measurement - lag(start_measurement, 1),   ## get drying interval between previous measurement and current one \n     equilibration_interval =  start_measurement - start_equilibration, ## time between taking sample and measurement\n     minutes = difftime(start_measurement, min(start_measurement), units = \"mins\") |&gt; as.numeric(), ## elapsed time since taking the first sample   \n     psi = psi |&gt; as.numeric())\n\n\n\nPlot data\n\nfrex_05_all_vessels |&gt; \n  ggplot(aes(x = minutes, y = perc_area_cav)) +\n  geom_line() +\n  labs(title = \"Embolism over time\",\n       x = \"Elapsed time (minutes)\",\n       y = \"Percentage of embolised area\") +\n  theme_bw()\n\n\n\nfrex_05_psi |&gt; \n  ggplot(aes(x = minutes, y = - psi / 10)) +\n  geom_line() +\n  labs(title = \"Water potential over time\",\n       x = \"Elapsed time (minutes)\",\n       y = \"Water potential (MPa)\") +\n  theme_bw()\n\n\n\n\n\n\nCreate model of water potential ~ time\nDefine function to predict water potential for the embolism data Uses b-splines for a flexible shape.\n\n## \nscamfun &lt;- function(water_potential, area){\n  mod &lt;- scam::scam(psi ~ s(minutes, bs = \"cr\", k = 3), data = water_potential)\n  predict(mod, newdata = list(minutes = area$minutes))\n}\n\n\n\nPredict water potentials y at minute x\n\nfrex_05_all_vessels &lt;- frex_05_all_vessels |&gt; \n  mutate(psi_pred = scamfun(frex_05_psi, frex_05_all_vessels),\n         psi_pred_MPa = - psi_pred / 10)    ## convert to MPa: divide by 10 and neg. sign \n\n\n\nPlot the percent embolised area vs predicted water potential\nThis is the data needed to model the xylem vulnerability curve.\n\nfrex_05_all_vessels |&gt; \n  ggplot(aes(x = psi_pred_MPa, y = perc_area_cav)) +\n  geom_point() +\n  labs(title = \"Embolism vs predicted water potential\",\n       x = \"Predicted water potential (MPa)\",\n       y = \"Percentage of embolised area\") +\n  theme_bw()\n\n\n\n\n\n\nFit the vulnerability curve\nThe fitplc package fits a sigmoidal curve to the data. The sigmoidal curve is rotational symmetric, i.e. there is a point of inflection at 50% embolism. The curve is defined by Ogle et al. (2009). By default, the model is fitted with bootstrapped confidence intervals from 1000 bootstrap replicates. That means, from the observed data points, here 629 rows, 1000 samples are drawn with replacement and the model is fitted to each of these samples. We get 1000 different models and their coefficients. The distribution of the coefficients is used to calculate the confidence intervals (CI). That means, at 95% of the time, the true value of the coefficient is within the CI. Bootstrapping is also useful here to address the violation of independent data (repeated measurements of leaf water potential, time series).\n\nmod_frex_05 &lt;- fitplc(frex_05_all_vessels,\n                      varnames =  ## tell which variables are to be used\n                        c(PLC = \"perc_area_cav\", ## PLC = \"percent loss of conductivity\", here: percent area cavitated\n                          WP = \"psi_pred_MPa\"),  ## WP = \"water potential\", here: predicted water potential [MPa]\n                      method = \"sigmoid\",\n                      bootci = TRUE,\n                      nboot = 1000)\n\n\n\nPlot the fitted curve\nThe fitplc package inverts the vulnerability curve, relative conductivity is 1 at 0% embolism and 0 at 100% embolism. The fitted coefficient , P50 ≈ -5.2 MPa, is located at the inflection point of the curve, i.e. where the slope is steepest. The confidence interval is very narrow, showing that P50 is very likely to be around -5.2 MPa.\n\nplot(mod_frex_05, main = \"Fitted vulnerability curve\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]